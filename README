HackNet - version 0.0.2

Trevor Powell:  whiterabbit@users.sourceforge.net
-------

HackNet is a multiplayer roguelike game borrowing heavily from the style and
gameplay of Hack and Nethack.  Our goal is to keep the flavour of Hack intact,
despite the gameplay changes required by allowing multiple simultaneous
players.

HackNet is in very early development (as you can see from our version number).
Please see the ChangeLog and the TODO list for project status and playability
information.  See NOTES for project goals and technical guidelines.  See
docs/instructions.txt for playing instructions.


What's New?   (See ChangeLog for details)
-------

New since 0.0.1, communication between players, rudimentary line-of-sight
(rogue-style), multiple dungeon levels, the ability to run the server and
clients on different servers.


Platforms Supported
-------

HackNet has been successfully compiled on:

x86 	- Debian GNU/Linux 2.1, 2.2, & current 'unstable'.
x86 	- FreeBSD 4.2-stable
x86 	- Cygwin (under Windows)
Alpha 	- RedHat Linux 7.0
PPC 	- Debian GNU/Linux 2.2
Sparc	- Debian GNU/Linux 2.2

Known problems exist for the following platforms:
Sun Solaris:  The current codebase will actually compile and link on the
  Solaris machines in SourceForge's compile farm, but won't run.  I suspect
  that this is due to a misconfigured dev environment on those machines,
  but I won't move this platform to the 'success' category above until I
  receive word from someone saying that they've had it compile and run
  properly.  If you have access to a Solaris box, I'd be quite grateful if
  you could test HackNet on it, and let me know the results!  (Note that
  you may need to export an environment variable of CC=gcc in order to
  make the configure script work properly)
Compaq Tru64:  The Tru64 machine in SourceForge's compile farm has no C++
  compiler installed on it.  Presumably, if you were to install the
  GNU utilities onto it, Hacknet would compile and run.  As with
  Solaris, I'd be glad to hear from anyone who's experimented with
  getting HackNet to run on a Tru64 machine.

...and more, as they're reported to me!  If you get it to compile on something
that isn't listed here, or get it compiling on one of the currently unworking
platforms, or have a lead on how to get it working, please let me know!  
Please submit any patches to me at: 

whiterabbit@users.sourceforge.net




Installing from a source package:
-------

Run ./configure, then type 'make' to make the hacknet server and client.
'make install' should install them somewhere sensible, but it's probably
easier to just run them straight out of the src directory -- that's what
I do!

Installing from CVS sources:
-------

As per standard GNU guidelines, configure scripts and makefiles are NOT
checked into CVS.  The configure script will be generated and executed
automatically when you run ./autogen.sh.

After the configure script has executed, type 'make' to make the hacknet 
server and client.  'make install' should then install them somewhere 
sensible, but it's probably easier to just run them straight out of their
build directories -- that's what I do!



Running HackNet:
--------

As mentioned under 'installing', I recommend running HackNet directly
from the build directories at the moment, so cd into those directories.

On the server machine, run the hacknetd binary.  You should receive
several screenfulls of debugging output as five dungeon levels are
constructed.  If you dislike the 'grouping' behaviour in which
nearby players are forced to take turns simultaneously, you can
disable that with a command-line argument of '--no-groups' when
starting the server.

On the client, run the hacknet.tty binary, passing the server address
as the final command line argument.  Hacknet will use your user
name as your player name, unless you give it a different name with
the -u option.

Example:  To connect to a server on the local computer with the
name 'Foo', use the following command line:

./hacknet.tty -uFoo localhost


Caveats:
--------

Note that currently the HackNet client is hard-wired to connect to a server
running on port 9274, and the server is hard-wired to use that port.  Is
there any demand to allow it to use an arbitrary port?  I should probably
stop being lazy and make it possible.

Note that currently quite a lot of data gets transferred to the client
when changing levels -- ~7k, which can take some amount of time on modem
connects.  Minimizing data that must be transferred is going to be a major 
goal for the next version.
