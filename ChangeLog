April 26, 2001:
  Adjusted client to use the (relatively) new netMetaPacket code that
  was originally written for the server.  Better code reusability, and
  easier to add new packet types.  (Particularly when sending strings
  over the net!)  WARNING:  The switch to the MetaPacket results in the
  requirement of accepting 16 bits worth of packet 'size' data, which
  means that in the current implementation, a malicious client could
  freeze up the server by connecting and sending a single byte of data --
  the server will block until it receives a second byte of data!  This
  is a high-priority fix for me.  I deserve to be slapped around for
  even thinking about knowingly checking the code with this sort of
  security flaw present..  but I'm doing it anyway.  Expect a fix for
  this issue within the next day or two.  :)

---
April 25, 2001:
  How sad is this -- I even put in a change on ANZAC day.  I ought to get
  my priorities straight!  ;)

  I actually did a major restruturing of the code to properly generate
  NetHack-style levels through identical code to that used in NetHack...
  and then realised that the NetHack code is functionally equivalent to
  what I already had (with one or two minor factors that I'd missed
  before)..  the NetHack version of the code is more efficient in CPU
  time and memory, but my version is more intuitive to the casual
  examiner (or so I like to believe), so I threw out all those changes
  and went back to the original code.  I've added in one or two factors
  that I'd missed before, though, such as limits on the maximum area of
  rooms.  (Currently hardcoded to 50 -- the same as in NetHack)

---
April 24, 2001:
  Long day at work -- not much time to work on HackNet.  Added ability
  for the client to connect to an internet server, and tested it on my
  local LAN.  No tests yet over the real Internet.  Note that we're using
  TCP, and so delivery is guaranteed.. but this also means that we have
  extra header data added to each packet.  Since most of our packets are
  quite small, it might be silly to use TCP -- we've almost always got
  larger packet headers than information in the packet!  Perhaps a switch
  to UDP is in the cards...  On the other hand, automatic guaranteed 
  delivery is a luxury I'm not eager to throw out.

  Oops.  My mistake -- another checkin so that the client still connects
  to localhost if called without parameters, instead of trying to
  connect to ./hacknet (or however you invoke the client).  Until the
  game is more playable, 99% of the time, connecting to localhost is
  going to be what you actually want to do, for testing purposes.  Once
  the game is more playable, I'll remove this default behaviour, and
  force an explicit hostname.  (Perhaps a ~/.hacknetrc file which lists,
  among other options, a default server?)

---
April 23, 2001:
  Minor adjustment to temporary movement code still in HN_Game.cpp to fix
  a potential bug.  Before, if a non-moving player saw a monster move 
  (currently unimplemented -- hence, potential bug), that monster would
  have shown up as a human player.  Fixed now.  Not that anybody will
  notice the change until monster movement is added.  And that won't
  happen until monsters are added.  So much to do!

  Removed HN_Consts.h, which was storing a level width/height.  This was
  just an ugly hack, to synchronise the size of the client's map with
  the server's map.  Now the server sends the client a 'map reset' packet
  when the client joins, which tells the client what size map it's going
  to use.  The server should also send this packet to the client every time
  the client moves to a new level (even if that level had been seen before).
  This tells the client to purge its memory of what level it's currently on.
  The server should ALWAYS follow the mapReset information with a full map
  refresh if the client has moved to a level he's visited before, and then
  with a set of visibility information, regardless of whether the player
  has visited that map before.

  Fixed minor bugs in MAP_Hack.cpp.  Rooms are no longer generated touching
  bottom border of the screen so frequently (silly case of using width when
  I ought to have been using height).  Other minor issues fixed, too.

---
April 22, 2001:
  Big changes today.  Here's the scoop:
  
  Added MAP_Client.cpp/.h.  This is a minimalist-implementation of mapBase
  functionality, without dependencies on the entBase and objBase classes
  (which the client isn't going to need).  Instead, it stores known map data
  and an entity type and an object type for each square.  (It needs to be able
  to store an object array for each square.. but we'll work on that later)

  Here's the biggie, though..  I've moved about half of the movement code
  into the entBase and entPlayer classes.  Once turns are properly synched
  between nearby players, I'll be able to remove the rest of the movement
  code, because it'll no longer be required.  (The movement code still in
  hnGame is there to synchronise the movements of moving players with the
  vision of non-moving players, if that makes any sense).

  Moved enumerations from OBJ/ENT_Base.h into OBJ/ENT_Types.h  This is so
  that the client code can get the types without including the object and
  entity class declarations (which it doesn't need).

  Fixed Makefile.am to remove some unneeded source files from the client.  My
  mistake.  :)   (They'd just be removed in the linking process, but now
  'make hacknet' doesn't have to compile quite so many source files)

  Removed 'playerData' structure from hnGame class.  It just stores pointers
  to entPlayer classes now -- the entPlayers keep track of their own extra
  data.  Hooray for object-oriented code!

---
April 21, 2001:
  Lots of renamed files, to make a more consistant file naming scheme.  Objects now
  have an OBJ prefix, Entities (players, monsters, etc) now have an ENT prefix, and
  Maps now have a MAP prefix.  Core classes still use HN, and network classes still
  use NET.

  Adjusted the hnGame and netServer classes.  The netServer has a pointer to the
  hnGame, which has a pointer to the lower-level guts of the simulation.  Both
  the netServer and the hnGame are singletons (possibly the hnGame shouldn't be
  a singleton -- to be considered for future updates).  This is in preparation
  for migrating the player update logic from the hnGame object into the entPlayer
  object.

  Added hnDungeon class (singleton) to own all the levels in the dungeon.  Again,
  trying to move as much out of the hnGame as possible, in preparation for moving
  the movement code into the entPlayer.
---
April 1, 2001:
  Continued discussions about timing issues.
  Adjusted object class hierarchy -- 'hnEntity' is now at the top of the hierarchy,
  with 'hnObject' and 'hnCreature' derived from it.  Players and monsters will be
  derived from hnCreature, while inanimate objects will be derived from hnObject.
---
March 11, 2001:
  Development kicks into gear and first code entered into SourceForge CVS repository
---
Dec 8, 2000:
  First code entered into CVS repository
---
